load("@com_github_atlassian_bazel_tools//:multirun/def.bzl", "command", "multirun")

sh_test(
    name = "test_multirun_success",
    srcs = ["test_compare_content.sh"],
    args = [
        "$(location :multirun_success)",
        "0",
        "$(location expected_success.txt)",
    ],
    data = [
        "expected_success.txt",
        ":multirun_success",
    ],
)

sh_test(
    name = "test_multirun_failure",
    srcs = ["test_compare_content.sh"],
    args = [
        "$(location :multirun_failure)",
        "5",
        "$(location expected_failure.txt)",
    ],
    data = [
        "expected_failure.txt",
        ":multirun_failure",
    ],
)

sh_test(
    name = "test_multirun_parallel_success",
    srcs = ["test_compare_content.sh"],
    args = [
        # Sort the output for deterministic comparison; order doesn't matter as long as all the expected lines are
        # there.
        "'$(location :multirun_parallel_success) | sort'",
        "0",
        "$(location expected_parallel_success.txt)",
    ],
    data = [
        "expected_parallel_success.txt",
        ":multirun_parallel_success",
    ],
)

sh_test(
    name = "test_multirun_parallel_failure",
    srcs = ["test_compare_content.sh"],
    args = [
        # Sort the output for deterministic comparison; order doesn't matter as long as all the expected lines are
        # there.
        "'$(location :multirun_parallel_failure) | sort'",
        "5",
        "$(location expected_parallel_failure.txt)",
    ],
    data = [
        "expected_parallel_failure.txt",
        ":multirun_parallel_failure",
    ],
)

sh_binary(
    name = "exit",
    srcs = ["exit.sh"],
)

sh_binary(
    name = "echo",
    srcs = ["echo.sh"],
)

multirun(
    name = "multirun_success",
    commands = [
        ":command_echo_1",
        ":command_echo_2",
    ],
)

multirun(
    name = "multirun_parallel_success",
    commands = [
        ":command_echo_2",
        ":command_echo_1",
    ],
    parallel = True,
)

command(
    name = "command_echo_1",
    arguments = [
        "command_1 a",
        "command_1 b",
    ],
    command = ":echo",
)

command(
    name = "command_echo_2",
    arguments = [
        "command_2 a",
        "command_2 b",
        "command_2 c",
    ],
    command = ":echo",
)

command(
    name = "command_echo_3",
    arguments = [
        "command_3 a",
    ],
    command = ":echo",
)

multirun(
    name = "multirun_failure",
    commands = [
        ":command_echo_2",
        ":command_exit",
        ":command_echo_3",
    ],
)

multirun(
    name = "multirun_parallel_failure",
    commands = [
        ":command_echo_2",
        ":command_exit",
        ":command_echo_3",
    ],
    parallel = True,
)

command(
    name = "command_exit",
    arguments = [
        "5",
    ],
    command = ":exit",
)

# We are not testing SIGINT because it's tricky to do.
# See https://unix.stackexchange.com/questions/356408/strange-problem-with-trap-and-sigint

sh_test(
    name = "test_multirun_parallel_sigterm",
    srcs = ["test_compare_content.sh"],
    args = [
        "'$(location :run_and_kill) $(location :multirun_parallel_signal_handling) 3 SIGTERM'",
        "143",
        "$(location expected_parallel_sigterm.txt)",
    ],
    data = [
        "expected_parallel_sigterm.txt",
        ":multirun_parallel_signal_handling",
        ":run_and_kill",
    ],
)

sh_test(
    name = "test_multirun_sigterm",
    srcs = ["test_compare_content.sh"],
    args = [
        "'$(location :run_and_kill) $(location :multirun_signal_handling) 3 SIGTERM'",
        "143",
        "$(location expected_sigterm.txt)",
    ],
    data = [
        "expected_sigterm.txt",
        ":multirun_signal_handling",
        ":run_and_kill",
    ],
)

sh_binary(
    name = "run_and_kill",
    srcs = ["run_and_kill.sh"],
)

sh_binary(
    name = "sleep_and_exit",
    srcs = ["sleep_and_exit.sh"],
)

multirun(
    name = "multirun_signal_handling",
    commands = [
        ":command_sleep_and_exit",
    ],
)

multirun(
    name = "multirun_parallel_signal_handling",
    commands = [
        ":command_sleep_and_exit",
    ],
    parallel = True,
)

command(
    name = "command_sleep_and_exit",
    arguments = [
        "4",
    ],
    command = ":sleep_and_exit",
)
